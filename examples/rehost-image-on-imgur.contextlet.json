{"code":"// You must set this to your client ID, which you can obtain via https://api.imgur.com/oauth2/addclient\n\nvar imgurClientId = 'YOUR_CLIENT_ID';\n\n// Let's define some functions...\n\n/**\n * Upload an image by its URL.\n */\nvar uploadByURL = function (url, onError)\n{\n    // Create the AJAX request to upload the image by its URL.\n    \n    var request = createUploadRequest(onError);\n    \n    // Resolve the URL to an absolute URL, in case it's relative.\n    \n    var a = document.createElement('a');\n    a.href = url;\n    url = a.href;\n    \n    // Send the request (uploading the image URL).\n    \n    var formData = new FormData();\n    formData.append('type', 'URL');\n    formData.append('image', url);\n    request.send(formData);\n};\n\n/**\n * Find the relevant element by its targetElementId and attempt to\n * upload its image data.\n */\nvar uploadByTargetElementData = function (targetElementId, onError)\n{\n    var element = browser.menus.getTargetElement(targetElementId);\n    \n    if (element == null)\n    {\n        onError('The image vanished before it could be uploaded.');\n    }\n    \n    if (!(element instanceof HTMLImageElement))\n    {\n        onError('Unable to read image data from the targeted element.');\n    }\n    \n    var onReady = function ()\n    {\n        uploadByCanvasImageSource(element, onError);\n    };\n    \n    // Make sure the image is fully loaded in the browser.\n    \n    if (element.complete)\n    {\n        onReady();\n    }\n    else\n    {\n        element.addEventListener('load', onReady);\n    }\n};\n\n/**\n * Upload an image by reading the image data from an img element and\n * uploading that data directly.\n */\nvar uploadByImageElement = function (img, onError)\n{\n    // Draw the image to a canvas so we can get its image data.\n    \n    var canvas = document.createElement('canvas');\n    canvas.width = img.naturalWidth;\n    canvas.height = img.naturalHeight;\n    canvas.getContext('2d').drawImage(img, 0, 0);\n    var base64Data = canvas.toDataURL('image/png').replace(/^data:[^,]+,/, '');\n    \n    // Create the AJAX request to upload the image data.\n    \n    var request = createUploadRequest(onError);\n    \n    // Send the request (uploading the image data).\n    \n    var formData = new FormData();\n    formData.append('type', 'base64');\n    formData.append('image', base64Data);\n    request.send(formData);\n};\n\n/**\n * Fall back from uploading by URL to uploading by image data.\n *\n * We'll call this function if we fail to upload the image by its URL.\n * It's possible that imgur can't access the image URL (for example, if\n * it's behind a login wall or isn't reachable on the Internet). In this\n * case, we'll try to fall back to uploading the image by its data\n * instead.\n */\nvar fallBackToData = function (errorMessage)\n{\n    // Do we know what element was clicked?\n    \n    if (context.info.targetElementId !== undefined)\n    {\n        // Try uploading the image data instead. The image will end up\n        // being reencoded, which unfortunately means that JPEGs will\n        // experience some loss of quality or be converted to PNG.\n        \n        uploadByTargetElementData(context.info.targetElementId, requestErrorHandler);\n    }\n    else\n    {\n        requestErrorHandler(errorMessage);\n    }\n};\n\n/**\n * Helper function to alerting the user about an error.\n */\nvar requestErrorHandler = function (message)\n{\n    console.log(message + ' The XMLHttpRequest object is below.');\n    console.log(request);\n    window.alert(message);\n};\n\n/**\n * Create an AJAX request for uploading to imgur, but don't send it yet.\n */\nvar createUploadRequest = function (onError)\n{\n    var request = new XMLHttpRequest();\n    request.open('POST', 'https://api.imgur.com/3/image');\n    request.setRequestHeader('Authorization', 'Client-ID ' + imgurClientId);\n    \n    request.addEventListener('readystatechange', function ()\n    {\n        if (request.readyState === 4)\n        {\n            // We've received the response.\n            \n            if (request.status !== 200)\n            {\n                onError('Failed to upload to imgur.');\n                return;\n            }\n            \n            try\n            {\n                var result = JSON.parse(request.responseText);\n                \n                if (result.data == undefined || result.data.link == undefined)\n                {\n                    throw new Error();\n                }\n            }\n            catch (error)\n            {\n                onError('Received a bad response from imgur.');\n                return;\n            }\n            \n            // Success! Send the user to the image URL.\n            \n            if (context.info.modifiers.indexOf('Ctrl') == -1)\n            {\n                // Open in the same tab.\n                \n                document.location = result.data.link;\n            }\n            else\n            {\n                // Open in a new tab.\n                \n                // window.open() is subject to the site's popup blocker settings, so we'll use a background script instead.\n                \n                context.runAs('background', function ()\n                {\n                    browser.tabs.create({url: this.params.url, active: true});\n                }, {url: result.data.link});\n            }\n        }\n    });\n    \n    return request;\n};\n\n// We're done defining the functions. Here's the initial program logic...\n\n// Put the original \"this\" in a variable so we can use it within functions.\n\nvar context = this;\n\nif (this.info.srcUrl !== undefined)\n{\n    // Attempt to upload the image by its src URL.\n    \n    uploadByURL(this.info.srcUrl, fallBackToData);\n}\nelse\n{\n    // The element that was clicked doesn't seem to have a src URL. Try\n    // uploading by the element's image data instead, if possible, or\n    // display this error message.\n    \n    fallBackToData('No image found.');\n}\n","contexts":["image"],"icons":null,"patterns":"","scope":"content","title":"Rehost Image on Imgur","type":"normal"}